#! /bin/bash

#
# made by Baptiste Fontaine
#
#
VERSION='1.5.0'
AUTHOR='Baptiste Fontaine'

# -----------------------------
#   USEFUL VARIABLES
# -----------------------------

# location of log
LOGATION="$HOME/.clr/clr_err.log"

# username
USERNAME=$(whoami)

# useful commands
RM='rm -f'
DU='du -s'

# -----------------------------
#   HELP
# -----------------------------

if [ -f ${HOME}/.clr/help/clr-help-${LANG%%_*}.txt ];
then
    HELP=$(cat ${HOME}/.clr/help/clr-help-${LANG%%_*}.txt);
else
    if [ -f ${HOME}/.clr/help/clr-help-default.txt ];
    then
        HELP=$(cat ${HOME}/.clr/help/clr-help-default.txt);
    else
        HELP="No help file is installed. Try 'man clr'.";
    fi
fi

# -----------------------------
#  LONG OPTIONS
# -----------------------------

if [ $# -eq 1 ];
then
    if [ $1 == '--help' ];
    then
        printf "$HELP\n";
        exit 0;
    else
        if [ $1 == '--version' ] || [ $1 == '--Version' ];
        then
            echo $VERSION;
            exit 0;
        fi
    fi
fi

# -----------------------------
#  SHORT OPTIONS
# -----------------------------

DEL_LIST_FILE='None'
RM_LAST_LOG=1
VERBOSE=1
LIGHTMODE=0
RM_COOKIES=0
CHECK_DISK_SPACE=1

while getopts :cdf:hklVv arg;
do
    case $arg in
        # -c(ookies)
        c) RM_COOKIES=1 ;;
        # -d(o not check disk space)
        d) CHECK_DISK_SPACE=0 ;;
        # -f <file>
        f) DEL_LIST_FILE=$OPTARG ;;
        # -h(elp)
        h) printf "$HELP\n";exit ;;
        # -k(eep log)
        k) RM_LAST_LOG=0 ;;
        # -l(ight mode)
        l) LIGHTMODE=1 ;;
        # -V(ersion)
        V) echo $VERSION; exit ;;
        # -v(erbose-no)
        v) VERBOSE=0 ;;
    esac
done

# -----------------------------
#   FUNCTIONS
# -----------------------------

# 'ecrire' means 'write' in French
function ecrire() {
    if [ $VERBOSE -eq 1 ];
    then
        echo $*;
    fi
}

# useful variables for purge_log()
tail='t' # means we can keep the tail of the file
head='h' #   '   '   '   '   '   head  '   '   '
nokeep='nk' # means no tail and no head
default=$tail

if [ $(which sponge) ];
then
    use_sponge=1;
else
    tmpfilepurge='/tmp/clr-tmp-file-purge'

    if [ $(which tempfile) ];
    then
        tmpfilepurge=$(tempfile);
    fi
fi

function purge_log() {
    # purge_log <fic> <tail|head>
    
    if [ $# -eq 2 ];
    then
        if [ -f $1 ];
        then
            if [ $LIGHTMODE -eq 1 ];
            then
                if [ $use_sponge -eq 1 ];
                then
                    case $2 in
                        $tail) tail $1 | sponge $1 && return 0 ;;
                        $head) head $1 | sponge $1 && return 0 ;;
                        $nokeep) echo -n > $1 && return 0 ;;
                        *) return 1 ;;
                    esac
                else
                    case $2 in
                        $tail) tail $1 > $tmpfilepurge; cat $tmpfilepurge > $1 && return 0 ;;
                        $head) head $1 > $tmpfilepurge; cat $tmpfilepurge > $1 && return 0 ;;
                        $nokeep) echo -n > $1 && return 0 ;;
                        *) return 1 ;;
                    esac
                fi
            else
                echo -n > $1 && return 0;
            fi
        fi
    fi
    
    return 1;
}

function rm_file() {
    # rm_file <path> <msg>

    if [ -f $1 ];
    then
        ecrire "$2";
        ${RM} $1 2>> $LOGATION;
    fi
}


# -----------------------------
#   BEFORE CLEANING
# -----------------------------

# create ~/.clr directory if it does not exist
mkdir -p $HOME/.clr


# [ if the OS is not GNU/linux ]
if ! [ -f /etc/lsb-release ];
then
    ecrire 'You do not seem to use GNU/Linux. This script is more efficient with it.';
    ecrire ' ';
fi

if [ $CHECK_DISK_SPACE -ne 0 ];
then
    BEFORE=$(${DU} . 2> /dev/null | cut -f1)

    ecrire 'Disc usage:'
    ecrire $(${DU}hc ~ | grep total | awk '{print $1}')
fi
ecrire 'clearing...'


# -----------------------------
#   CLEANING [START]
# -----------------------------

# -----------------------------
#   logs
# -----------------------------

# clr.sh log file

if [ $RM_LAST_LOG == 1 ];
then
    ecrire 'Clr log file';
    purge_log $LOGATION $tail;
fi

# Tyrs log file

if [ -f ~/.config/tyrs/tyrs.log ];
then
    ecrire 'Tyrs log file';
    purge_log ~/.config/tyrs/tyrs.log $tail;
fi

# MySQL error log

if [ -f /var/log/mysql/error.log ];
then
    ecrire 'MySQL Error log';
    purge_log /var/log/mysql/error.log $tail;
fi

# Zeitgeist old logs

if [ -d ~/.cache/zeitgeist ];
then
    ecrire 'Zeitgeist old logs';
    ${RM} ~/.cache/zeitgeist/daemon.log.* 2>> $LOGATION;
fi

# Ubuntu One old logs

if [ -d ~/.cache/ubuntuone/log ];
then
    ecrire 'Ubuntu One logs'
    for f in ~/.cache/ubuntuone/*.log;
    do
        purge_log $f $tail;
    done
    
    ecrire 'Ubuntu One old logs'
    ${RM} ~/.cache/ubuntuone/log/credentials.log.* 2>> $LOGATION;
    ${RM} ~/.cache/ubuntuone/log/syncdaemon-exceptions.log.* 2>> $LOGATION;
    ${RM} ~/.cache/ubuntuone/log/syncdaemon.log.* 2>> $LOGATION;
    ${RM} ~/.cache/ubuntuone/*.log.* 2>> $LOGATION;
fi

# Gwibber log

if [ -f ~/.cache/gwibber/gwibber.log ];
then
    ecrire 'Gwibber logs';
    purge_log ~/.cache/gwibber/gwibber.log $tail;
fi

# Shotwell log

if [ -f ~/.cache/shotwell/shotwell.log ];
then
    ecrire 'Shotwell logs';
    purge_log ~/.cache/shotwell/shotwell.log $tail;
fi

# SSO-client log

if [ -f ~/.cache/sso/sso-client.log ];
then
    ecrire 'SSO logs';
    purge_log ~/.cache/sso/sso-client.log $tail;
fi

# Software center log

if [ -f ~/.cache/software-center/software-center.log ];
then
    ecrire 'Software center logs';
    purge_log ~/.cache/software-center/software-center.log $tail;
fi

# Notify-osd log

if [ -f ~/.cache/notify-osd.log ];
then
    ecrire 'Old desktop notifications';
    purge_log ~/.cache/notify-osd.log $tail;
fi

# Checkbox log

if [ -f ~/.cache/checkbox/checkbox.log ];
then
    ecrire 'Checkbox logs';
    purge_log ~/.cache/checkbox/checkbox.log $tail;
fi

# Desktop-couch log

if [ -d ~/.cache/desktop-couch/log ];
then
    ecrire 'Old desktop couch logs';
    ${RM} ~/.cache/desktop-couch/log/*.log.*;
fi

# Inkscape extension error log

if [ -f ~/.config/inkscape/extension-errors.log ];
then
    ecrire 'Inkscape extensions error log';
    purge_log ~/.config/inkscape/extension-errors.log $default;
fi

# Tomboy log

if [ -f ~/.config/tomboy/tomboy.log ];
then
    ecrire 'Tomboy log';
    purge_log ~/.config/tomboy/tomboy.log $default;
fi

# Banshee log

if [ -f ~/.config/banshee-1/log ];
then
    ecrire 'Banshee log';
    purge_log ~/.config/banshee-1/log $tail;
fi

# Hedgewars log

if [ -f ~/.hedgewars/Logs/game0.log ];
then
    ecrire 'Hedgewars game log';
    purge_log ~/.hedgewars/Logs $nokeep;
fi

# Alex4 log

if [ -f ~/.alex4/log.txt ];
then
    ecrire 'Alex4 log';
    purge_log ~/.alex4/log.txt $nokeep;
fi

# Azureus log

if [ -f ~/.azureus/logs/debug_1.log ];
then
    ecrire 'Azureus debug log';
    purge_log ~/.azureus/logs/debug_1.log $tail;
fi

# Gephi log

if [ -d ~/.gephi/dev/var/log ];
then
    ecrire 'Gephi log';
    ${RM} ~/.gephi/dev/var/log/messages.log.* 2>> $LOGATION;
fi

# -----------------------------
#   cache
# -----------------------------

# Chromium cache

if [ -d ~/.cache/chromium/Default/Cache ];
then
    ecrire 'Chromium cache';
    ${RM} ~/.cache/chromium/Default/Cache/* 2>> $LOGATION;
fi

# Gwibber avatars cache

if [ -d ~/.cache/gwibber/avatars ];
then
    ecrire 'Gwibber avatars cache';
    ${RM} ~/.cache/gwibber/avatars/* 2>> $LOGATION;
fi

# transmission favicons cache

if [ -d ~/.cache/transmission/favicons ];
then
    ecrire 'Transmission favicons cache';
    ${RM} ~/.cache/transmission/favicons/* 2>> $LOGATION;
fi

# Wallpaper cache

if [ -d ~/.cache/wallpaper ];
then
    ecrire 'Wallpaper cache';
    ${RM} ~/.cache/wallpaper/* 2>> $LOGATION;
fi

# Liferea favicons cache

if [ -d ~/.liferea_1.6/cache/favicons: ]
then
    ecrire 'Liferea favicons cache';
    ${RM} ~/.liferea_1.6/cache/favicons/* 2>> $LOGATION;
fi

# Seamonkey cache

if [ -d ~/.mozilla/seamonkey ];
then
    for f in ~/.mozilla/seamonkey/*; do
        [ -d $f/Cache ] && ${RM} $f/Cache/* 2>> $LOGATION;
    done
fi

# Epiphany favicon cache list

rm_file ~/.gnome2/epiphany/ephy-favicon-cache.xml 'Epiphany favicon cache';

# Epiphany favicon cache files

if [ -d ~/.gnome2/epiphany/favicon_cache ];
then
    ${RM} ~/.gnome2/epiphany/favicon_cache/* 2>> $LOGATION;
fi

# Midori (fav)icons cache

if [ -d ~/.cache/midori/icons ];
then
    ecrire 'Midori icons cache'
    ${RM} ~/.cache/midori/icons/* 2>> $LOGATION;
fi

# Clementine network cache

if [ -d ~/.config/Clementine/networkcache/http ];
then
    ecrire 'Clementine network cache';
    ${RM} ~/.config/Clementine/networkcache/http/*.cache 2>> $LOGATION;
fi

# -----------------------------
#   histories
# -----------------------------

# bash history

if [ -f ${HISTFILE:-"$HOME/.bash_history"} ];
then
    ecrire 'Bash history';
    purge_log ${HISTFILE:-"$HOME/.bash_history"} $default; #todo
fi

# MySQL (command-line) history

if [ -f ~/.mysql_history ];
then
    ecrire 'MySQL history';
    purge_log ~/.mysql_history $default; #todo
fi

# Stardict history

rm_file ~/.stardict/history 'StarDict history';

# Konqueror history

rm_file ~/.kde/share/apps/konqueror/konq_history 'Konqueror history';

# Epiphany history

rm_file ~/.gnome2/epiphany/ephy-history.xml 'Epiphany history';

# Chromium history

if [ -d ~/.config/chromium/Default ];
then
    ${RM} ~/.config/chromium/Default/History\ Index\ * 2>> $LOGATION;
fi

# Rekonq history

rm_file ~/.kde/share/apps/rekonq/history 'Rekonq history';

# Uzbl history

rm_file ~/.local/share/uzbl/history 'Uzbl history';

# Wxglade file history

if [ -f ~/.wxglade/file_history.txt ];
then
    ecrire 'Wxglade file history';
    echo '# -*- coding: utf-8 -*-' > ~/.wxglade/file_history.txt 2>> $LOGATION;
fi

# PostgreSQL commands history

rm_file ~/.psql_history 'PostgreSQL commands history';

# cmus

if [ -d ~/.cmus ];
then
    ecrire 'Cmus commands history'
    purge_log ~/.cmus/command-history;

    ecrire 'Cmus search history'
    purge_log ~/.cmus/search-history;
fi

# -----------------------------
#   temporary files
# -----------------------------

# Internet Explorer (wine) temporary files

if [ -d ~/.wine ];
then
    if [ -d ~/.wine/drive_c/users/$USERNAME/Local\ Settings/Temporary\ Internet\ Files/ ];
    then
        ecrire 'IE temporary files';
        ${RM}R ~/.wine/drive_c/users/$USERNAME/Local\ Settings/Temporary\ Internet\ Files/ 2>> $LOGATION;
    fi
fi

# Tex temporary files

ecrire 'Tex temporary files'
find $HOME -name *.aux -delete 2>> $LOGATION
find $HOME -name *.tex.backup -delete 2>> $LOGATION

# Tex index temporary files

ecrire 'Index temporary files'
find $HOME -name *.ilg -delete 2>> $LOGATION
find $HOME -name *.ind -delete 2>> $LOGATION

# XEmacs, Kwrite [, ...] temporary saved files

ecrire 'Text editors temporary files'
${RM} *~
find $HOME -name *~ -delete 2>> $LOGATION

# Adobe Flash Player temporary files

if [ -d ~/.adobe/Flash_Player/AssetCache ];
then
    ecrire 'Adobe Flash Player temporary files';
    ${RM}R ~/.adobe/Flash_Player/AssetCache/* 2>> $LOGATION;
fi

# Macromedia Flash Player temporary files

if [ -d ~/.macromedia/Flash_Player ];
then
    ecrire 'Macromedia Flash Player temporary files';
    ${RM}R ~/.macromedia/Flash_Player/* 2>> $LOGATION;
fi

# Python compiled files

# ecrire 'Python compiled files'
# find $HOME -name *.pyc -delete 2>> $LOGATION

# Temporary Eclipse files

# if [ -d ~/.mozilla/eclipse ];
# then
#     ecrire 'Eclipse temporary files';
#     ${RM}R ~/.mozilla/eclipse/ 2>> $LOGATION;
# fi

# Temporary Firefox files

# if [ -d ~/.mozilla/firefox ];
# then
#     ecrire 'Firefox temporary files';
#     ${RM}R ~/.mozilla/firefox/ 2>> $LOGATION;
# fi

# -----------------------------
#   thumbnails
# -----------------------------

if [ -d ~/.thumbnails/normal ];
then
    ecrire 'Thumbnails';
    ${RM}R ~/.thumbnails/normal/* 2>> $LOGATION;
fi

if [ -d ~/.thumbnails/normal/fail ];
then
    ${RM}R ~/.thumbnails/fail/* 2>> $LOGATION;
fi

if [ -d ~/.thumbnails/normal/small ];
then
    ${RM}R ~/.thumbnails/small/* 2>> $LOGATION;
fi

if [ -d ~/.shotwell/thumbs ];
then
    ecrire 'Shotwell Thumbnails';
    ${RM} ~/.shotwell/thumbs/thumbs*/* 2>> $LOGATION;
fi

# -----------------------------
#   browsers: cookies & local storage
# -----------------------------

if [ $RM_COOKIES -eq 1 ];
then

    # Midori cookies

    rm_file ~/.config/midori/cookies.txt 'Midori cookies';
    
    # Chromium cookies
    
    if [ -f ~/.config/chromium/Default/Cookies ];
    then
        ecrire 'Chromium cookies';
        echo -n > ~/.config/chromium/Default/Cookies 2>> $LOGATION;
    fi
    
    # Chromium local storage
    
    if [ -d ~/.config/chromium/Default/Local\ Storage ];
    then
        ecrire 'Chromium local storage';
        ${RM} ~/.config/chromium/Default/Local\ Storage/* 2>> $LOGATION;
    fi
    
    # Uzbl cookies
    
    rm_file ~/.local/share/uzbl/cookies.txt; 'Uzbl cookies';
fi

# -----------------------------
#   others
# -----------------------------

# Recent documents

if [ -d ~/.kde/share/apps/RecentDocuments ];
then
    ecrire 'Recent Documents list';
    ${RM} ~/.kde/share/apps/RecentDocuments/* 2>> $LOGATION;
fi

# -----------------------------
#   personal file
# -----------------------------

if [ $DEL_LIST_FILE != 'None' ];
then
    if [ -f $2 ];
    then
        for fic in $(cat $2);
        do
            if [ -f $fic ];
            then
                printf 'deleting %s...\n' $fic;
                ${RM} $fic;
            else
                if [ -d $fic ];
                then
                    printf 'deleting content of %s...\n' $fic;
                    ${RM}R "${fic%'/'}/*";
                fi
            fi
        done
    else
        echo "ERR: $2 is not a valid filename." | tee $LOGATION;
    fi
fi

# -----------------------------
#   CLEANING [END]
# -----------------------------

[ $VERBOSE -ne 0 ] && clear;

# -----------------------------
#   AFTER
# -----------------------------

if [ $CHECK_DISK_SPACE -ne 0 ];
then
    AFTER=$(($BEFORE-$(${DU} . | cut -f1)))

    if [ $AFTER -lt 0 ];
    then
        echo "$((-$AFTER)) Kio more after clr usage." >> $LOGATION; 
        AFTER='0 Kio';
    else
        if [ $AFTER -gt 1024 ];
        then
            AFTER=$(($AFTER/1024));

            if [ $AFTER -gt 1024 ];
            then
                AFTER="$(($AFTER/1024)) Gio";
            else
                AFTER="${AFTER} Mio";
            fi
        else
            AFTER="${AFTER} Kio";
        fi
    fi

    ecrire "Temporary files removed (${AFTER}). User disc usage:"
    ecrire $(${DU}hc ~ 2> /dev/null | grep total | awk '{print $1}')
fi

# ========== END =========== #
# ========================== #
